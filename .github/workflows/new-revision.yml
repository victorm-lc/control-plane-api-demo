name: Create New Revision

# Trigger the workflow on push to main
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]

# Set environment variables
env:
  PYTHON_VERSION: '3.11'
  REGISTRY: docker.io
  IMAGE_NAME: davidxu3/control-plane-api-demo
  DEPLOYMENT_ID: 'your-deployment-id-here'  # Replace with your actual deployment ID from LangGraph Platform
  # Control Plane Configuration - Should match your deployment setup:
  # For LangGraph Cloud (Hosted): https://api.host.langchain.com (US) or https://eu.api.host.langchain.com (EU)  
  # For Self-Hosted: Your custom Control Plane URL (e.g., https://langgraph.yourcompany.com)
  CONTROL_PLANE_HOST: 'https://api.host.langchain.com'
  # Deployment type: 'dev' for hosted, 'dev_free' for self-hosted (should match your deployment)
  DEPLOYMENT_TYPE: 'dev'  # Change to 'dev_free' for self-hosted
  MAX_WAIT_TIME: 1800  # 30 minutes

jobs:
  # Job 1: Run validation
  validate:
    if: (github.ref == 'refs/heads/main' || (github.event.pull_request.merged == true))
    runs-on: ubuntu-latest
    
    outputs:
      should-deploy: ${{ steps.validation.outputs.deploy }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
    
    - name: Run validation
      id: validation
      run: |
        echo "✅ Validation passed - proceeding with revision update"
        echo "deploy=true" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 2: Build and push Docker image
  build-and-push:
    needs: validate
    if: needs.validate.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
        labels: |
          org.opencontainers.image.title=LangGraph AI Agent
          org.opencontainers.image.description=AI Agent built with LangGraph
          org.opencontainers.image.vendor=YourCompany
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          PYTHON_VERSION=${{ env.PYTHON_VERSION }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
    
    - name: Output image details
      run: |
        echo "🐳 Docker image built and pushed successfully!"
        echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "🏷️  Tags: ${{ steps.meta.outputs.tags }}"

  # Job 3: Update deployment using Control Plane API v2
  update-deployment:
    needs: [validate, build-and-push]
    if: success()
    runs-on: ubuntu-latest
    
    outputs:
      revision-id: ${{ steps.patch.outputs.revision-id }}
    
    steps:
    - name: Update notification
      run: |
        echo "🔄 Updating deployment revision..."
        echo "🆔 Deployment ID: ${{ env.DEPLOYMENT_ID }}"
        echo "🚀 New image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "🌐 Control Plane: ${{ env.CONTROL_PLANE_HOST }}"
    
    - name: Update deployment using Control Plane API v2
      id: patch
      run: |
        echo "🔄 Updating deployment using Control Plane API v2..."
        echo "🌐 Control Plane: ${{ env.CONTROL_PLANE_HOST }}"
        echo "🔧 Deployment Type: ${{ env.DEPLOYMENT_TYPE }}"
        
        # Check if this is a self-hosted deployment (contains custom host or dev_free type)
        if [[ "${{ env.DEPLOYMENT_TYPE }}" == "dev_free" ]] || [[ "${{ env.CONTROL_PLANE_HOST }}" != *"api.host.langchain.com"* ]]; then
          echo "📦 Updating self-hosted deployment..."
          
          # Self-hosted deployment update (external_docker source)
          # Note: image_uri is required for external_docker source deployments
          response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            "${{ env.CONTROL_PLANE_HOST }}/v2/deployments/${{ env.DEPLOYMENT_ID }}" \
            --request PATCH \
            --header 'Content-Type: application/json' \
            --header 'X-Api-Key: ${{ secrets.LANGSMITH_API_KEY }}' \
            --data '{
              "source_config": {
                "resource_spec": {
                  "min_scale": 0,
                  "max_scale": 1,
                  "cpu": 1,
                  "memory_mb": 1024
                }
              },
              "source_revision_config": {
                "repo_ref": null,
                "langgraph_config_path": null,
                "image_uri": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
              }
            }')
        else
          echo "☁️  Updating LangGraph Cloud (hosted) deployment..."
          
          # Hosted deployment update (github source)
          # Note: image_uri is null because we're using GitHub source - LangGraph Platform will build from repo
          response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            "${{ env.CONTROL_PLANE_HOST }}/v2/deployments/${{ env.DEPLOYMENT_ID }}" \
            --request PATCH \
            --header 'Content-Type: application/json' \
            --header 'X-Api-Key: ${{ secrets.LANGSMITH_API_KEY }}' \
            --data '{
              "source_config": {
                "build_on_push": false
              },
              "source_revision_config": {
                "repo_ref": "${{ github.ref_name }}",
                "langgraph_config_path": "langgraph.json",
                "image_uri": null
              }
            }')
        fi
        
        # Extract HTTP status and response body
        http_status=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
        response_body=$(echo $response | sed -e 's/HTTPSTATUS\:.*//g')
        
        # Check if deployment update was successful
        if [ $http_status -eq 200 ]; then
          echo "✅ Deployment updated successfully!"
          echo "📋 Response: $response_body"
          
          # Get the latest revision from the updated deployment
          get_response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            "${{ env.CONTROL_PLANE_HOST }}/v2/deployments/${{ env.DEPLOYMENT_ID }}/revisions" \
            --header 'X-Api-Key: ${{ secrets.LANGSMITH_API_KEY }}')
          
          get_http_status=$(echo $get_response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          get_response_body=$(echo $get_response | sed -e 's/HTTPSTATUS\:.*//g')
          
          if [ $get_http_status -eq 200 ]; then
            # Extract the latest revision ID (first in the list since they're sorted by created_at desc)
            latest_revision_id=$(echo $get_response_body | python3 -c "import sys, json; print(json.load(sys.stdin)['resources'][0]['id'])")
            echo "revision-id=$latest_revision_id" >> $GITHUB_OUTPUT
            echo "🔄 Latest Revision ID: $latest_revision_id"
          else
            echo "⚠️  Could not retrieve latest revision ID: $get_http_status"
            echo "📋 Response: $get_response_body"
          fi
        else
          echo "❌ Deployment update failed with status: $http_status"
          echo "📋 Response: $response_body"
          exit 1
        fi

  # Job 4: Wait for new revision to be deployed
  wait-deployment:
    needs: update-deployment
    if: success() && needs.update-deployment.outputs.revision-id != ''
    runs-on: ubuntu-latest
    
    steps:
    - name: Wait for revision to be deployed
      run: |
        echo "⏳ Waiting for revision to be deployed..."
        echo "🆔 Deployment ID: ${{ env.DEPLOYMENT_ID }}"
        echo "🔄 Revision ID: ${{ needs.update-deployment.outputs.revision-id }}"
        
        deployment_id="${{ env.DEPLOYMENT_ID }}"
        revision_id="${{ needs.update-deployment.outputs.revision-id }}"
        start_time=$(date +%s)
        
        while [ $(($(date +%s) - start_time)) -lt ${{ env.MAX_WAIT_TIME }} ]; do
          # Get revision status
          response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            "${{ env.CONTROL_PLANE_HOST }}/v2/deployments/$deployment_id/revisions/$revision_id" \
            --header 'X-Api-Key: ${{ secrets.LANGSMITH_API_KEY }}')
          
          http_status=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          response_body=$(echo $response | sed -e 's/HTTPSTATUS\:.*//g')
          
          if [ $http_status -eq 200 ]; then
            status=$(echo $response_body | python3 -c "import sys, json; print(json.load(sys.stdin)['status'])")
            echo "📊 Current status: $status"
            
            if [ "$status" = "DEPLOYED" ]; then
              echo "✅ Revision is deployed!"
              exit 0
            elif echo "$status" | grep -q "FAILED"; then
              echo "❌ Revision deployment failed with status: $status"
              echo "📋 Response: $response_body"
              exit 1
            fi
          else
            echo "⚠️  Failed to get revision status: $http_status"
            echo "📋 Response: $response_body"
          fi
          
          echo "⏳ Waiting 60 seconds before next check..."
          sleep 60
        done
        
        echo "❌ Timeout waiting for revision to be deployed"
        exit 1
    
    - name: Success notification
      run: |
        echo "🎉 Revision update completed successfully!"
        echo "🆔 Deployment ID: ${{ env.DEPLOYMENT_ID }}"
        echo "🔄 Revision ID: ${{ needs.update-deployment.outputs.revision-id }}"
        echo "🚀 Your LangGraph application revision is now deployed and ready!"